/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./src/common/Utils.ts":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Utils = void 0;\nvar domUtils_1 = __webpack_require__(/*! ./domUtils */ "./src/common/domUtils.ts");\nvar Utils = /** @class */ (function () {\n    function Utils() {\n        this.completedLoading = function () {\n            (0, domUtils_1.getById)(\'loading\').remove();\n        };\n        if (Utils.shared)\n            return Utils.shared;\n        else\n            Utils.shared = this;\n    }\n    return Utils;\n}());\nexports.Utils = Utils;\n\n\n//# sourceURL=webpack://kutils/./src/common/Utils.ts?')},"./src/common/domUtils.ts":(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.getById = void 0;\nvar getById = function (id) {\n    return document.getElementById(id);\n};\nexports.getById = getById;\n\n\n//# sourceURL=webpack://kutils/./src/common/domUtils.ts?')},"./src/focusmanager/Controller.ts":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Controller = void 0;\nvar domUtils_1 = __webpack_require__(/*! ../common/domUtils */ \"./src/common/domUtils.ts\");\nvar Controller = /** @class */ (function () {\n    function Controller() {\n        var _this = this;\n        this.originFocusTime = 0;\n        this.originRelaxTime = 0;\n        this.focusTime = 0;\n        this.relaxTime = 0;\n        this.isFocus = true;\n        this.startTime = 0; // 시작 시간을 저장할 변수\n        /****초기화****/\n        //이벤트 리스너 등록 등 초기화 함수\n        this.init = function () {\n            //스타트 버튼 액션 이벤트 리스너 등\n            (0, domUtils_1.getById)('btn-start').addEventListener('click', _this.startAction);\n            (0, domUtils_1.getById)('btn-end').addEventListener('click', _this.end);\n            (0, domUtils_1.getById)('btn-relax-start').addEventListener('click', _this.startRelax);\n            (0, domUtils_1.getById)('btn-focus-start').addEventListener('click', _this.startFocus);\n        };\n        //이벤트 리스너 함수\n        this.startAction = function () {\n            if (_this.focusEle.value === \"\" ||\n                _this.relaxEle.value === \"\" ||\n                Number(_this.focusEle.value) <= 0 ||\n                Number(_this.relaxEle.value) <= 0) {\n                alert(\"입력 값을 확인해주세요\");\n                return;\n            }\n            _this.start();\n        };\n        /****진행****/\n        //타이머 시작\n        this.start = function () {\n            // 시간 저장 (분을 초로 변환)\n            _this.originFocusTime = _this.focusTime = Number(_this.focusEle.value) * 60;\n            _this.originRelaxTime = _this.relaxTime = Number(_this.relaxEle.value) * 60;\n            _this.updateTimeDisplay(_this.focusTime);\n            //화면 전환\n            _this.settingEle.classList.add('hide');\n            _this.timerEle.classList.remove('hide');\n            // 시작 시간 기록\n            _this.startTime = Date.now();\n            _this.timer = setInterval(_this.timerAction, 500);\n        };\n        this.end = function () {\n            //값 초기화\n            _this.timerEle.classList.add('hide');\n            _this.settingEle.classList.remove('hide');\n            clearInterval(_this.timer);\n        };\n        // 타이머 액션\n        this.timerAction = function () {\n            var elapsed = (Date.now() - _this.startTime) / 1000; // 초 단위로 경과 시간 계산\n            if (_this.isFocus) {\n                _this.focusTime = _this.originFocusTime - elapsed * 100;\n                _this.updateTimeDisplay(_this.focusTime);\n                if (_this.focusTime <= 0) {\n                    clearInterval(_this.timer);\n                    if (_this.autoEle.checked) {\n                        _this.startRelax();\n                    }\n                    else {\n                        alert(\"Focus Completed!\");\n                        // 휴식 시작 버튼 표시\n                        (0, domUtils_1.getById)('btn-relax-start').classList.remove('hide');\n                    }\n                }\n            }\n            else {\n                _this.relaxTime = _this.originRelaxTime - elapsed * 100;\n                _this.updateTimeDisplay(_this.relaxTime);\n                if (_this.relaxTime <= 0) {\n                    clearInterval(_this.timer);\n                    if (_this.autoEle.checked) {\n                        _this.startFocus();\n                    }\n                    else {\n                        alert(\"Relax Completed!\");\n                        // 집중 시작 버튼 표시\n                        (0, domUtils_1.getById)('btn-focus-start').classList.remove('hide');\n                    }\n                }\n            }\n        };\n        // 휴식 시작\n        this.startRelax = function () {\n            _this.startTime = Date.now();\n            _this.isFocus = false;\n            _this.relaxTime = Number(_this.relaxEle.value) * 60;\n            (0, domUtils_1.getById)('btn-relax-start').classList.add('hide');\n            (0, domUtils_1.getById)('display-message').textContent = \"Relax\";\n            _this.timer = setInterval(_this.timerAction, 500);\n        };\n        // 집중 시작\n        this.startFocus = function () {\n            _this.startTime = Date.now();\n            _this.isFocus = true;\n            _this.focusTime = Number(_this.focusEle.value) * 60;\n            (0, domUtils_1.getById)('btn-focus-start').classList.add('hide');\n            (0, domUtils_1.getById)('display-message').textContent = \"Focus\";\n            _this.timer = setInterval(_this.timerAction, 500);\n        };\n        this.focusEle = (0, domUtils_1.getById)('f_time');\n        this.relaxEle = (0, domUtils_1.getById)('r_time');\n        this.autoEle = (0, domUtils_1.getById)('auto');\n        this.settingEle = (0, domUtils_1.getById)('setting');\n        this.timerEle = (0, domUtils_1.getById)('timer');\n        if (Controller.shared)\n            return Controller.shared;\n        else {\n            Controller.shared = this;\n        }\n    }\n    // 시간을 00:00 형식으로 표시\n    Controller.prototype.updateTimeDisplay = function (timeInSeconds) {\n        var _timeInSeconds = timeInSeconds <= 0 ? 0 : timeInSeconds;\n        var minutes = Math.floor(_timeInSeconds / 60);\n        var seconds = Math.floor(_timeInSeconds % 60);\n        (0, domUtils_1.getById)('display-timer').textContent = \"\".concat(String(minutes).padStart(2, '0'), \":\").concat(String(seconds).padStart(2, '0'));\n    };\n    return Controller;\n}());\nexports.Controller = Controller;\n\n\n//# sourceURL=webpack://kutils/./src/focusmanager/Controller.ts?")},"./src/focusmanager/index.ts":function(__unused_webpack_module,exports,__webpack_require__){eval('\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nvar Controller_1 = __webpack_require__(/*! ./Controller */ "./src/focusmanager/Controller.ts");\nvar Utils_1 = __webpack_require__(/*! ../common/Utils */ "./src/common/Utils.ts");\nvar BASE_URL = "/kuitl/";\nwindow.onload = function () { return __awaiter(void 0, void 0, void 0, function () {\n    var wakeLock, err_1;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (\'serviceWorker\' in navigator) {\n                    navigator.serviceWorker.register(\'/serviceWorker.js\').then(function () {\n                        console.log(\'Service Worker Registered\');\n                    });\n                }\n                if (!(\'wakeLock\' in navigator)) return [3 /*break*/, 4];\n                wakeLock = null;\n                _a.label = 1;\n            case 1:\n                _a.trys.push([1, 3, , 4]);\n                return [4 /*yield*/, navigator.wakeLock.request(\'screen\')];\n            case 2:\n                wakeLock = _a.sent();\n                wakeLock.addEventListener(\'release\', function () {\n                    console.log(\'Wake Lock was released\');\n                });\n                console.log(\'Wake Lock is active\');\n                return [3 /*break*/, 4];\n            case 3:\n                err_1 = _a.sent();\n                console.error("".concat(err_1.name, ", ").concat(err_1.message));\n                return [3 /*break*/, 4];\n            case 4:\n                new Controller_1.Controller().init();\n                new Utils_1.Utils().completedLoading();\n                return [2 /*return*/];\n        }\n    });\n}); };\n\n\n//# sourceURL=webpack://kutils/./src/focusmanager/index.ts?')}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(n.exports,n,n.exports,__webpack_require__),n.exports}var __webpack_exports__=__webpack_require__("./src/focusmanager/index.ts")})();